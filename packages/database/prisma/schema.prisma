// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Node {
  id        String    @id
  x         Int
  y         Int
  building  String
  floor     String
  type      String
  longName  String
  shortName String
  outgoing  Edge[]    @relation(name: "NodeOutgoingEdge")
  incoming  Edge[]    @relation(name: "NodeIncomingEdge")
  service   Service[] @relation(name: "ServiceToNode")
  patients  Patient[] @relation(name: "PatientToNode")
}

model Edge {
  startNodeId String
  endNodeId   String
  startNode   Node   @relation(name: "NodeOutgoingEdge", fields: [startNodeId], references: [id], onDelete: Cascade)
  endNode     Node   @relation(name: "NodeIncomingEdge", fields: [endNodeId], references: [id], onDelete: Cascade)

  @@id(name: "edgeId", [startNodeId, endNodeId])
}

model Service {
  id          String       @id @default(uuid())
  nodeId      String
  node        Node         @relation(name: "ServiceToNode", fields: [nodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  priority    String
  date        DateTime     @default(now())
  login       String
  status      String
  type        ServiceType
  note        String
  flower      Flower?      @relation(name: "FlowerToService")
  gift        Gift?        @relation(name: "GiftToService")
  room        Room?        @relation(name: "RoomToService")
  security    Security?    @relation(name: "SecurityToService")
  av          AV?          @relation(name: "AVToService")
  maintenance Maintenance? @relation(name: "MaintenanceToService")
  transport   Transport?   @relation(name: "TransportToService")
  sanitation  Sanitation?  @relation(name: "SanitationToService")
}

enum ServiceType {
  flower
  gift
  room
  security
  av
  maintenance
  transport
  sanitation
}

model Flower {
  id            String  @id @default(uuid())
  serviceId     String  @unique
  service       Service @relation(name: "FlowerToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  flower        String
  recipientName String
}

model Gift {
  id            String  @id @default(uuid())
  serviceId     String  @unique
  service       Service @relation(name: "GiftToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type          String
  recipientName String
  wrapping      Boolean
  message       String
}

model Room {
  id        String   @id @default(uuid())
  serviceId String   @unique
  service   Service  @relation(name: "RoomToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  checkIn   DateTime
  checkOut  DateTime
}

model Security {
  id        String   @id @default(uuid())
  serviceId String   @unique
  service   Service  @relation(name: "SecurityToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  dateTime  DateTime
  threat    String
}

model AV {
  id        String   @id @default(uuid())
  serviceId String   @unique
  service   Service  @relation(name: "AVToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  dateTime  DateTime
  type      String
}

model Maintenance {
  id        String    @id @default(uuid())
  serviceId String    @unique
  service   Service   @relation(name: "MaintenanceToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type      String
  severity  String
  startDate DateTime  @default(now())
  endDate   DateTime?
}

model Transport {
  id        String  @id @default(uuid())
  serviceId String  @unique
  service   Service @relation(name: "TransportToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type      String
  count     String
}

model Sanitation {
  id        String    @id @default(uuid())
  serviceId String    @unique
  service   Service   @relation(name: "SanitationToService", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type      String
  quality   String
  startDate DateTime  @default(now())
  endDate   DateTime?
}

model Patient {
  id          String   @id @default(uuid())
  SSN         Int?     @unique
  nodeId      String   @default("BINFO00202")
  location    Node     @relation(name: "PatientToNode", fields: [nodeId], references: [id], onUpdate: SetDefault, onDelete: SetDefault)
  doctor      String
  date        DateTime @default(now())
  firstName   String
  middleName  String?
  lastName    String
  inTreatment Boolean  @default(true)
  insurance   String?
}
