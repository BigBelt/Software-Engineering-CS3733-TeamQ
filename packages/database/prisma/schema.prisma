// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Node {
  id        String    @id
  x         Int
  y         Int
  building  String
  floor     String
  type      String
  longName  String
  shortName String
  outgoing  Edge[]    @relation(name: "NodeOutgoingEdge")
  incoming  Edge[]    @relation(name: "NodeIncomingEdge")
  service   Service[] @relation(name: "ServiceRequest")
}

model Edge {
  id          String @id
  startNodeId String
  endNodeId   String
  startNode   Node   @relation(name: "NodeOutgoingEdge", fields: [startNodeId], references: [id], onDelete: Cascade)
  endNode     Node   @relation(name: "NodeIncomingEdge", fields: [endNodeId], references: [id], onDelete: Cascade)
}

model Service {
  id       String    @id @default(uuid())
  nodeId   String
  node     Node      @relation(name: "ServiceRequest", fields: [nodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  priority String
  date     DateTime  @default(now())
  login    String
  status   String
  type     String
  note     String
  flower   Flower?   @relation(name: "Flower")
  gift     Gift?     @relation(name: "Gift")
  room     Room?     @relation(name: "Room")
  security Security? @relation(name: "Security")
  av       AV?       @relation(name: "AV")
}

model Flower {
  id            String  @id @default(uuid())
  serviceId     String  @unique
  service       Service @relation(name: "Flower", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  flower        String
  recipientName String
}

model Gift {
  id            String  @id @default(uuid())
  serviceId     String  @unique
  service       Service @relation(name: "Gift", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type          String
  recipientName String
  wrapping      Boolean
  message       String
}

model Room {
  id        String   @id @default(uuid())
  serviceId String   @unique
  service   Service  @relation(name: "Room", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  checkIn   DateTime
  checkOut  DateTime
}

model Security {
  id        String   @id @default(uuid())
  serviceId String   @unique
  service   Service  @relation(name: "Security", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  dateTime  DateTime
  threat    String
}

model AV {
  id        String   @id @default(uuid())
  serviceId String   @unique
  service   Service  @relation(name: "AV", fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  dateTime  DateTime
  type      String
}
